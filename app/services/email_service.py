"""
Email Service for Integrated Monitor

This service provides email notification functionality for monitoring alerts.
It supports SMTP email sending with configurable templates and recipients.

Author: Integrated Monitor Team
Version: 1.0.0
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone, timedelta
import logging
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailService:
    """Email service for sending monitoring alerts"""
    
    def __init__(self):
        # Load email configuration from environment variables
        self.smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.smtp_username = os.getenv("SMTP_USERNAME", "")
        self.smtp_password = os.getenv("SMTP_PASSWORD", "")
        self.sender_email = os.getenv("SENDER_EMAIL", "")
        self.sender_name = os.getenv("SENDER_NAME", "Integrated Monitor")
        
        # Default recipients (can be overridden per alert)
        self.default_recipients = os.getenv("DEFAULT_EMAIL_RECIPIENTS", "").split(",") if os.getenv("DEFAULT_EMAIL_RECIPIENTS") else []
        
        # Email templates
        self.templates = {
            "heartbeat_failure": {
                "subject": "ðŸš¨ Heartbeat Monitor Alert: {endpoint_name} is DOWN",
                "body": """
                <html>
                <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                        <div style="background-color: #ff4444; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                            <h2 style="margin: 0;">ðŸš¨ Heartbeat Monitor Alert</h2>
                        </div>
                        
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; border-left: 4px solid #ff4444;">
                            <h3 style="color: #d32f2f; margin-top: 0;">Endpoint: {endpoint_name}</h3>
                            <p><strong>Status:</strong> <span style="color: #d32f2f;">DOWN</span></p>
                            <p><strong>URL:</strong> {endpoint_url}</p>
                            <p><strong>Method:</strong> {method}</p>
                            <p><strong>Status Code:</strong> {status_code}</p>
                            <p><strong>Response Time:</strong> {response_time_ms:.2f}ms</p>
                            <p><strong>Error Message:</strong> {error_message}</p>
                            <p><strong>Timestamp:</strong> {timestamp}</p>
                        </div>
                        
                        <div style="margin-top: 20px; padding: 15px; background-color: #e3f2fd; border-radius: 5px;">
                            <h4 style="margin-top: 0; color: #1976d2;">What This Means:</h4>
                            <p>The monitored API endpoint is not responding as expected. This could indicate:</p>
                            <ul>
                                <li>Service is down or unreachable</li>
                                <li>Service is experiencing high latency</li>
                                <li>Authentication or authorization issues</li>
                                <li>Network connectivity problems</li>
                            </ul>
                        </div>
                        
                        <div style="margin-top: 20px; padding: 15px; background-color: #f3e5f5; border-radius: 5px;">
                            <h4 style="margin-top: 0; color: #7b1fa2;">Recommended Actions:</h4>
                            <ol>
                                <li>Check if the service is running</li>
                                <li>Verify network connectivity</li>
                                <li>Check service logs for errors</li>
                                <li>Verify authentication credentials</li>
                                <li>Contact the service team if needed</li>
                            </ol>
                        </div>
                        
                        <div style="margin-top: 20px; text-align: center; color: #666; font-size: 12px;">
                            <p>This alert was generated by Integrated Monitor at {alert_time}</p>
                            <p>Please do not reply to this email. For support, contact your system administrator.</p>
                        </div>
                    </div>
                </body>
                </html>
                """
            },
            "heartbeat_recovery": {
                "subject": "âœ… Heartbeat Monitor Recovery: {endpoint_name} is BACK UP",
                "body": """
                <html>
                <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                        <div style="background-color: #4caf50; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                            <h2 style="margin: 0;">âœ… Heartbeat Monitor Recovery</h2>
                        </div>
                        
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; border-left: 4px solid #4caf50;">
                            <h3 style="color: #2e7d32; margin-top: 0;">Endpoint: {endpoint_name}</h3>
                            <p><strong>Status:</strong> <span style="color: #2e7d32;">UP</span></p>
                            <p><strong>URL:</strong> {endpoint_url}</p>
                            <p><strong>Method:</strong> {method}</p>
                            <p><strong>Status Code:</strong> {status_code}</p>
                            <p><strong>Response Time:</strong> {response_time_ms:.2f}ms</p>
                            <p><strong>Timestamp:</strong> {timestamp}</p>
                        </div>
                        
                        <div style="margin-top: 20px; padding: 15px; background-color: #e8f5e8; border-radius: 5px;">
                            <h4 style="margin-top: 0; color: #2e7d32;">Recovery Details:</h4>
                            <p>The previously failing API endpoint is now responding correctly. The service has recovered from the previous issue.</p>
                        </div>
                        
                        <div style="margin-top: 20px; text-align: center; color: #666; font-size: 12px;">
                            <p>This recovery notification was generated by Integrated Monitor at {alert_time}</p>
                            <p>Please do not reply to this email. For support, contact your system administrator.</p>
                        </div>
                    </div>
                </body>
                </html>
                """
            }
        }
    
    def _get_ist_timestamp(self) -> str:
        """Get current timestamp in IST format"""
        ist_timezone = timezone(timedelta(hours=5, minutes=30))
        return datetime.now(ist_timezone).strftime("%Y-%m-%d %H:%M:%S IST")
    
    def _format_template(self, template: str, **kwargs) -> str:
        """Format email template with provided variables"""
        formatted = template
        for key, value in kwargs.items():
            placeholder = "{" + key + "}"
            if placeholder in formatted:
                formatted = formatted.replace(placeholder, str(value))
        return formatted
    
    def send_heartbeat_alert(self, 
                           endpoint_name: str, 
                           endpoint_url: str, 
                           method: str, 
                           status_code: Optional[int], 
                           response_time_ms: float, 
                           error_message: Optional[str], 
                           recipients: Optional[List[str]] = None,
                           is_recovery: bool = False) -> Dict[str, Any]:
        """
        Send heartbeat monitoring alert email
        
        Args:
            endpoint_name: Name of the monitored endpoint
            endpoint_url: URL of the endpoint
            method: HTTP method used
            status_code: HTTP status code received
            response_time_ms: Response time in milliseconds
            error_message: Error message if any
            recipients: List of email recipients (uses default if not provided)
            is_recovery: Whether this is a recovery notification
            
        Returns:
            Dict with success status and message
        """
        try:
            # Use provided recipients or default recipients
            email_recipients = recipients or self.default_recipients
            
            if not email_recipients:
                logger.warning("No email recipients configured for heartbeat alert")
                return {"success": False, "error": "No email recipients configured"}
            
            # Select template based on whether it's a failure or recovery
            template_key = "heartbeat_recovery" if is_recovery else "heartbeat_failure"
            template = self.templates[template_key]
            
            # Format subject and body
            subject = self._format_template(template["subject"], endpoint_name=endpoint_name)
            body = self._format_template(
                template["body"],
                endpoint_name=endpoint_name,
                endpoint_url=endpoint_url,
                method=method,
                status_code=status_code or "N/A",
                response_time_ms=response_time_ms,
                error_message=error_message or "N/A",
                timestamp=self._get_ist_timestamp(),
                alert_time=self._get_ist_timestamp()
            )
            
            # Send email
            result = self._send_email(
                recipients=email_recipients,
                subject=subject,
                html_body=body
            )
            
            if result["success"]:
                alert_type = "recovery" if is_recovery else "failure"
                logger.info(f"Sent heartbeat {alert_type} alert email for {endpoint_name} to {email_recipients}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error sending heartbeat alert email: {str(e)}")
            return {"success": False, "error": str(e)}
    
    def _send_email(self, 
                   recipients: List[str], 
                   subject: str, 
                   html_body: str, 
                   text_body: Optional[str] = None) -> Dict[str, Any]:
        """
        Send email using SMTP
        
        Args:
            recipients: List of email addresses
            subject: Email subject
            html_body: HTML email body
            text_body: Plain text email body (optional)
            
        Returns:
            Dict with success status and message
        """
        try:
            # Validate configuration
            if not all([self.smtp_username, self.smtp_password, self.sender_email]):
                return {"success": False, "error": "SMTP configuration incomplete"}
            
            # Create message
            msg = MIMEMultipart("alternative")
            msg["From"] = f"{self.sender_name} <{self.sender_email}>"
            msg["To"] = ", ".join(recipients)
            msg["Subject"] = subject
            
            # Add text and HTML parts
            if text_body:
                text_part = MIMEText(text_body, "plain")
                msg.attach(text_part)
            
            html_part = MIMEText(html_body, "html")
            msg.attach(html_part)
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=ssl.create_default_context())
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)
            
            return {"success": True, "message": "Email sent successfully"}
            
        except Exception as e:
            logger.error(f"Error sending email: {str(e)}")
            return {"success": False, "error": str(e)}
    
    async def test_email_configuration(self) -> Dict[str, Any]:
        """Test email configuration by sending a test email"""
        try:
            if not self.default_recipients:
                return {"success": False, "error": "No default recipients configured"}
            
            test_subject = "ðŸ§ª Integrated Monitor - Email Configuration Test"
            test_body = f"""
            <html>
            <body>
                <h2>Email Configuration Test</h2>
                <p>This is a test email to verify that the Integrated Monitor email service is properly configured.</p>
                <p><strong>Test Time:</strong> {self._get_ist_timestamp()}</p>
                <p><strong>SMTP Server:</strong> {self.smtp_server}:{self.smtp_port}</p>
                <p><strong>Sender:</strong> {self.sender_email}</p>
                <p>If you received this email, the email configuration is working correctly.</p>
            </body>
            </html>
            """
            
            result = self._send_email(
                recipients=self.default_recipients,
                subject=test_subject,
                html_body=test_body
            )
            
            return result
            
        except Exception as e:
            logger.error(f"Error testing email configuration: {str(e)}")
            return {"success": False, "error": str(e)}
    
    async def get_configuration_status(self) -> Dict[str, Any]:
        """Get email service configuration status"""
        return {
            "smtp_server": self.smtp_server,
            "smtp_port": self.smtp_port,
            "smtp_username": self.smtp_username,
            "sender_email": self.sender_email,
            "sender_name": self.sender_name,
            "default_recipients": self.default_recipients,
            "configured": all([self.smtp_username, self.smtp_password, self.sender_email]),
            "has_recipients": len(self.default_recipients) > 0
        }
